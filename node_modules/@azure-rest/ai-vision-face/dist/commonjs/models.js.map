{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/** Model for creating face collection. */\nexport interface CreateCollectionRequest {\n  /** User defined name, maximum length is 128. */\n  name: string;\n  /** Optional user defined data. Length should not exceed 16K. */\n  userData?: string;\n  /**\n   * The 'recognitionModel' associated with this face list. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.\n   *\n   * Possible values: \"recognition_01\", \"recognition_02\", \"recognition_03\", \"recognition_04\"\n   */\n  recognitionModel?: RecognitionModel;\n}\n\n/** User defined fields for object update. */\nexport interface UserDefinedFieldsForUpdate {\n  /** User defined name, maximum length is 128. */\n  name?: string;\n  /** Optional user defined data. Length should not exceed 16K. */\n  userData?: string;\n}\n\n/** Add face from url request. */\nexport interface AddFaceFromUrlRequest {\n  /** URL of input image. */\n  url: string;\n}\n\n/** User defined data for persisted face. */\nexport interface FaceUserData {\n  /** User-provided data attached to the face. The length limit is 1K. */\n  userData?: string;\n}\n\n/** User defined fields for object creation. */\nexport interface UserDefinedFields {\n  /** User defined name, maximum length is 128. */\n  name: string;\n  /** Optional user defined data. Length should not exceed 16K. */\n  userData?: string;\n}\n\n/** Request model for creating liveness session. */\nexport interface CreateLivenessSessionContent {\n  /**\n   * Type of liveness mode the client should follow.\n   *\n   * Possible values: \"Passive\", \"PassiveActive\"\n   */\n  livenessOperationMode: LivenessOperationMode;\n  /** Whether or not to allow client to set their own 'deviceCorrelationId' via the Vision SDK. Default is false, and 'deviceCorrelationId' must be set in this request body. */\n  deviceCorrelationIdSetInClient?: boolean;\n  /** Whether or not store the session image. */\n  enableSessionImage?: boolean;\n  /**\n   * The model version used for liveness classification. This is an optional parameter, and if this is not specified, then the latest supported model version will be chosen\n   *\n   * Possible values: \"2024-11-15\"\n   */\n  livenessModelVersion?: LivenessModel;\n  /** Unique Guid per each end-user device. This is to provide rate limiting and anti-hammering. If 'deviceCorrelationIdSetInClient' is true in this request, this 'deviceCorrelationId' must be null. */\n  deviceCorrelationId?: string;\n  /** Seconds the session should last for. Range is 60 to 86400 seconds. Default value is 600. */\n  authTokenTimeToLiveInSeconds?: number;\n}\n\nexport interface CreateLivenessWithVerifySessionContentLivenessOperationModePartDescriptor {\n  name: \"livenessOperationMode\";\n  body: LivenessOperationMode;\n}\n\nexport interface CreateLivenessWithVerifySessionContentDeviceCorrelationIdSetInClientPartDescriptor {\n  name: \"deviceCorrelationIdSetInClient\";\n  body: boolean;\n}\n\nexport interface CreateLivenessWithVerifySessionContentEnableSessionImagePartDescriptor {\n  name: \"enableSessionImage\";\n  body: boolean;\n}\n\nexport interface CreateLivenessWithVerifySessionContentLivenessModelVersionPartDescriptor {\n  name: \"livenessModelVersion\";\n  body: LivenessModel;\n}\n\nexport interface CreateLivenessWithVerifySessionContentDeviceCorrelationIdPartDescriptor {\n  name: \"deviceCorrelationId\";\n  body: string;\n}\n\nexport interface CreateLivenessWithVerifySessionContentAuthTokenTimeToLiveInSecondsPartDescriptor {\n  name: \"authTokenTimeToLiveInSeconds\";\n  body: number;\n}\n\nexport interface CreateLivenessWithVerifySessionContentReturnVerifyImageHashPartDescriptor {\n  name: \"returnVerifyImageHash\";\n  body: boolean;\n}\n\nexport interface CreateLivenessWithVerifySessionContentVerifyConfidenceThresholdPartDescriptor {\n  name: \"verifyConfidenceThreshold\";\n  body: number;\n}\n\nexport interface CreateLivenessWithVerifySessionContentVerifyImagePartDescriptor {\n  name: \"verifyImage\";\n  body: string | Uint8Array | ReadableStream<Uint8Array> | NodeJS.ReadableStream | File;\n  filename?: string;\n  contentType?: string;\n}\n\n/** Alias for DetectionModel */\nexport type DetectionModel = string;\n/** Alias for RecognitionModel */\nexport type RecognitionModel = string;\n/** Alias for FaceAttributeType */\nexport type FaceAttributeType = string;\n/** Alias for FindSimilarMatchMode */\nexport type FindSimilarMatchMode = string;\n/** Alias for LivenessOperationMode */\nexport type LivenessOperationMode = string;\n/** Alias for LivenessModel */\nexport type LivenessModel = string;\n/** Request of liveness with verify session creation. */\nexport type CreateLivenessWithVerifySessionContent =\n  | FormData\n  | Array<\n      | CreateLivenessWithVerifySessionContentLivenessOperationModePartDescriptor\n      | CreateLivenessWithVerifySessionContentDeviceCorrelationIdSetInClientPartDescriptor\n      | CreateLivenessWithVerifySessionContentEnableSessionImagePartDescriptor\n      | CreateLivenessWithVerifySessionContentLivenessModelVersionPartDescriptor\n      | CreateLivenessWithVerifySessionContentDeviceCorrelationIdPartDescriptor\n      | CreateLivenessWithVerifySessionContentAuthTokenTimeToLiveInSecondsPartDescriptor\n      | CreateLivenessWithVerifySessionContentReturnVerifyImageHashPartDescriptor\n      | CreateLivenessWithVerifySessionContentVerifyConfidenceThresholdPartDescriptor\n      | CreateLivenessWithVerifySessionContentVerifyImagePartDescriptor\n    >;\n/** API versions for Azure AI Face API. */\nexport type Versions = \"v1.1-preview.1\" | \"v1.2-preview.1\" | \"v1.2\";\n"]}